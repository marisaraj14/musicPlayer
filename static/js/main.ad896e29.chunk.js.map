{"version":3,"sources":["Player.js","PlayList.js","App.js","reportWebVitals.js","index.js"],"names":["Player","props","waveformRef","useRef","useState","isPlaying","setIsPlaying","waveSurfer","setWaveSurfer","number","lyrics","useEffect","WaveSurfer","create","container","current","waveColor","progressColor","cursorColor","barWidth","hideScrollbar","stopMusic","load","song","path","value","localStorage","getItem","title","togglePlayPause","playPause","stop","ref","className","tabIndex","onKeyDown","e","key","handleSpace","onClick","type","min","max","step","onChange","setVolume","artist","rows","placeholder","setItem","PlayList","listItems","songList","map","index","setSong","toString","App","setSongList","a","fetch","response","json","list","status","Error","message","fetchSongList","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ad896e29.chunk.js","sourcesContent":["import WaveSurfer from \"wavesurfer.js\";\nimport React, { useRef, useEffect, useState } from \"react\";\n\n\nexport default function Player(props) {\n    const waveformRef = useRef();\n    const [isPlaying, setIsPlaying] = useState(false);\n    const [waveSurfer, setWaveSurfer] = useState(null);\n    let number = useRef(\"0.5\");\n\n    let lyrics = useRef();\n    useEffect(() => {\n        setWaveSurfer(WaveSurfer.create({\n            container: waveformRef.current,\n            waveColor: '#3BAFDD',\n            progressColor: '#013380',\n            cursorColor: 'transparent',\n            barWidth: 4,\n            hideScrollbar: true\n        }))\n\n    }, [])\n\n    useEffect(() => {\n        if (waveSurfer) {\n            stopMusic();\n            waveSurfer.load('music/' + props.song.path);\n        }\n        lyrics.current.value = localStorage.getItem(props.song.title)\n\n    }, [props.song.title])\n\n    const handleSpace = (e) => {\n        if (e.key == \" \") {\n            togglePlayPause();\n        }\n        else if (e.key === \"Enter\") {\n            stopMusic();\n        }\n    };\n\n    const togglePlayPause = () => {\n        waveSurfer.playPause()\n        setIsPlaying(!isPlaying)\n    }\n\n    const stopMusic = () => {\n        if (isPlaying)\n            setIsPlaying(!isPlaying)\n        waveSurfer.stop();\n    }\n\n    const handleSubmit = () => {\n        localStorage.setItem(props.song.title, lyrics.current.value);\n    }\n\n    const handleVolumeChange = () => {\n        waveSurfer.setVolume(number.current.value)\n    }\n\n    return (\n        <>\n            <section ref={waveformRef} className=\"row-start-1 w-11/12 m-4 h-1/4 border-4 rounded-md border-blue-700\" tabIndex=\"0\" onKeyDown={(e) => handleSpace(e)} />\n            <section className=\"text-5xl p-0 text-gray-700 row-start-2\">\n                <button className=\"focus:none\" onClick={() => togglePlayPause()} >\n                    {\n                        isPlaying ? <i className=\"fa fa-pause\"></i>\n                            : <i className=\"fa fa-play\"></i>\n                    }</button>\n                <i className=\"fa fa-stop p-4\" onClick={() => stopMusic()}></i>\n                <i className=\"fa fa-volume-off\"></i>\n                <input className=\"p-2 w-20 bg-green-300\" type=\"range\" min=\"0\" max=\"1\" step=\"0.1\" ref={number} onChange={() => handleVolumeChange()} />\n            </section>\n            <section className=\"row-start-3 text-center w-11/12\">\n                <h1 className=\"font-bold text-3xl\">{props.song.title}</h1>\n                <h2 className=\"text-2xl\">{props.song.artist}</h2>\n                <textarea\n                    className=\"form-textarea mt-1 bg-blue-200 rounded w-11/12 m-4 p-4 text-2xl\"\n                    rows=\"3\"\n                    placeholder=\"Enter your lyrics here!\" ref={lyrics}>{lyrics}</textarea>\n                <button className=\"text-2xl bg-blue-800 p-2 rounded-md text-white px-20 m-4 float-right\" onClick={() => handleSubmit()}>Save</button>\n            </section>\n        </>\n    );\n\n}","export default function PlayList(props) {\n\n    const listItems = props.songList.map((song, index) =>\n        <li key={index.toString()} className=\"inline-block text-center px-4\" onClick={()=>props.setSong(song)}>\n            <h1 className=\"px-2 text-2xl font-bold font-monospace text-blue-300 flex-1\">{song.title}</h1>\n            <p className=\"px-2 pb-4 text-xl font-bold flex-1\">{song.artist}</p>\n        </li>\n    );\n    return (\n        <section className=\"row-start-4 bg-blue-900 p-2 text-white h-24 mt-2 overflow-auto flex content-center\">\n            <ul className=\"justify-center h-24 pb-2\">\n                {listItems}\n            </ul>\n        </section>\n    );\n}","import { useState } from \"react\";\nimport Player from \"./Player\";\nimport PlayList from \"./PlayList\";\nimport { useEffect } from \"react\";\n\nexport default function App() {\n  const [songList, setSongList] = useState([]);\n  const [song, setSong] = useState({\n    title: \"Song Name\",\n    artist: \"Artist Name\",\n    path: \"default.mp3\"\n  });\n\n  useEffect(() => {\n    async function fetchSongList() {\n      const response = await fetch('list.json');\n      const list = await response.json();\n      if (response.status !== 200) {\n        throw Error(list.message);\n      }\n      setSongList(list);\n    }\n    fetchSongList();\n  },[])\n\n  return (\n    <article className=\"grid grid-cols-1 place-items-center\">\n      <Player song={song}  />\n      <PlayList songList={songList} setSong={setSong} />\n    </article>\n  )\n}\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}